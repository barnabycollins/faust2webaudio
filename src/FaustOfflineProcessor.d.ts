import { TCompiledDsp } from "./types";
export declare class FaustOfflineProcessor {
    private bufferSize;
    private sampleRate;
    private dspMeta;
    private $ins;
    private $outs;
    private dspInChannnels;
    private dspOutChannnels;
    private numIn;
    private numOut;
    private ptrSize;
    private sampleSize;
    private $audioHeap;
    private $$audioHeapInputs;
    private $$audioHeapOutputs;
    private $audioHeapInputs;
    private $audioHeapOutputs;
    private $dsp;
    private factory;
    private HEAP;
    private HEAP32;
    private HEAPF32;
    private output;
    static get importObject(): {
        env: {
            memory: WebAssembly.Memory;
            memoryBase: number;
            tableBase: number;
            _abs: (x: number) => number;
            _acosf: (x: number) => number;
            _asinf: (x: number) => number;
            _atanf: (x: number) => number;
            _atan2f: (y: number, x: number) => number;
            _ceilf: (x: number) => number;
            _cosf: (x: number) => number;
            _expf: (x: number) => number;
            _floorf: (x: number) => number;
            _fmodf: (x: number, y: number) => number;
            _logf: (x: number) => number;
            _log10f: (x: number) => number;
            _max_f: (...values: number[]) => number;
            _min_f: (...values: number[]) => number;
            _remainderf: (x: number, y: number) => number;
            _powf: (x: number, y: number) => number;
            _roundf: (x: number) => number;
            _sinf: (x: number) => number;
            _sqrtf: (x: number) => number;
            _tanf: (x: number) => number;
            _acoshf: (x: number) => number;
            _asinhf: (x: number) => number;
            _atanhf: (x: number) => number;
            _coshf: (x: number) => number;
            _sinhf: (x: number) => number;
            _tanhf: (x: number) => number;
            _acos: (x: number) => number;
            _asin: (x: number) => number;
            _atan: (x: number) => number;
            _atan2: (y: number, x: number) => number;
            _ceil: (x: number) => number;
            _cos: (x: number) => number;
            _exp: (x: number) => number;
            _floor: (x: number) => number;
            _fmod: (x: number, y: number) => number;
            _log: (x: number) => number;
            _log10: (x: number) => number;
            _max_: (...values: number[]) => number;
            _min_: (...values: number[]) => number;
            _remainder: (x: number, y: number) => number;
            _pow: (x: number, y: number) => number;
            _round: (x: number) => number;
            _sin: (x: number) => number;
            _sqrt: (x: number) => number;
            _tan: (x: number) => number;
            _acosh: (x: number) => number;
            _asinh: (x: number) => number;
            _atanh: (x: number) => number;
            _cosh: (x: number) => number;
            _sinh: (x: number) => number;
            _tanh: (x: number) => number;
            table: WebAssembly.Table;
        };
    };
    init(options: {
        compiledDsp?: TCompiledDsp;
        sampleRate?: number;
    }): Promise<void>;
    setup(options?: {
        sampleRate?: number;
    }): void;
    compute(): Float32Array[];
    plot(options?: {
        compiledDsp?: TCompiledDsp;
        size?: number;
        sampleRate?: number;
    }): Promise<Float32Array[]>;
}
