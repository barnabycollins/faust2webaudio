import { TDspMeta, TFaustCompileArgs } from "./types";
export declare const ab2str: (buf: ArrayBuffer) => string;
export declare const str2ab: (str: string) => ArrayBuffer;
export declare const atoUint6: (nChr: number) => number;
export declare const atoab: (sBase64: string, nBlocksSize?: number) => ArrayBuffer;
export declare const heap2Str: (buf: number[]) => string;
export declare const mixer32Module: WebAssembly.Module;
export declare const midiToFreq: (note: number) => number;
export declare const remap: (v: number, mn0: number, mx0: number, mn1: number, mx1: number) => number;
export declare const findPath: (o: any, p: string) => boolean;
export declare const findPathClosure: () => (o: any, p: string) => boolean;
export declare const createWasmImport: (voices: number, memory: WebAssembly.Memory) => {
    env: {
        memory: WebAssembly.Memory;
        memoryBase: number;
        tableBase: number;
        _abs: (x: number) => number;
        _acosf: (x: number) => number;
        _asinf: (x: number) => number;
        _atanf: (x: number) => number;
        _atan2f: (y: number, x: number) => number;
        _ceilf: (x: number) => number;
        _cosf: (x: number) => number;
        _expf: (x: number) => number;
        _floorf: (x: number) => number;
        _fmodf: (x: number, y: number) => number;
        _logf: (x: number) => number;
        _log10f: (x: number) => number;
        _max_f: (...values: number[]) => number;
        _min_f: (...values: number[]) => number;
        _remainderf: (x: number, y: number) => number;
        _powf: (x: number, y: number) => number;
        _roundf: (x: number) => number;
        _sinf: (x: number) => number;
        _sqrtf: (x: number) => number;
        _tanf: (x: number) => number;
        _acoshf: (x: number) => number;
        _asinhf: (x: number) => number;
        _atanhf: (x: number) => number;
        _coshf: (x: number) => number;
        _sinhf: (x: number) => number;
        _tanhf: (x: number) => number;
        _acos: (x: number) => number;
        _asin: (x: number) => number;
        _atan: (x: number) => number;
        _atan2: (y: number, x: number) => number;
        _ceil: (x: number) => number;
        _cos: (x: number) => number;
        _exp: (x: number) => number;
        _floor: (x: number) => number;
        _fmod: (x: number, y: number) => number;
        _log: (x: number) => number;
        _log10: (x: number) => number;
        _max_: (...values: number[]) => number;
        _min_: (...values: number[]) => number;
        _remainder: (x: number, y: number) => number;
        _pow: (x: number, y: number) => number;
        _round: (x: number) => number;
        _sin: (x: number) => number;
        _sqrt: (x: number) => number;
        _tan: (x: number) => number;
        _acosh: (x: number) => number;
        _asinh: (x: number) => number;
        _atanh: (x: number) => number;
        _cosh: (x: number) => number;
        _sinh: (x: number) => number;
        _tanh: (x: number) => number;
        table: WebAssembly.Table;
    };
};
export declare const createWasmMemory: (voicesIn: number, dspMeta: TDspMeta, effectMeta: TDspMeta, bufferSize: number) => WebAssembly.Memory;
export declare const args2String: (args: TFaustCompileArgs) => string;
export declare const argsTbl2String: (args: string[]) => string;
export declare const toArgv: (args: TFaustCompileArgs) => string[];
